PearsonCorrelationSimilarity:
皮爾森相關係數反應了兩個變量之間的線性相關程度，它的取值在[-1, 1]之間。
當兩個變量的線性關係增強時，相關係數趨於1或-1；
當一個變量增大，另一個變量也增大時，表明它們之間是"正相關"的，相關係數大於0；
如果一個變量增大，另一個變量卻減小，表明它們之間是"負相關"的，相關係數小於0；
如果相關係數等於0，表明它們之間不存在線性相關關係。

//demo
例如:
假設兩者使用者對n個相同事物進行了評分，以u1、u2分別為x、y軸，以u1、u2對同一事物的評分為坐標軸上的點，
在這個二維坐標軸中總和出一條直線，使之距離各個評分點平均最近，就可以用這條總和直線的角度來評估u1、u2的相似性，當斜角為45度時相似性最好。
//demo

注意:
(1)沒有考慮用戶間重疊的評分項數量對相似度的影響(使用weight參數解決)
(2)如果兩個用戶之間只有一個共同的評分項目，相似度無法被計算

==========================================================================================================================================
UncenteredCosineSimilarity:
Cosine相似度的實現，多維空間兩點與所設定的點形成夾角的餘弦值(cos=直角三角形鄰邊與斜邊的比值)，夾角越大，兩點相距就越遠，相似度就越小。

例如:比如用戶對內容評分，5分制，X和Y兩個用戶對兩個內容的評分分別為(1,2)和(4,5)，使用餘弦相似度得出的結果是0.98，兩者極為相似，
但從評分上看X似乎不喜歡這2個內容，餘弦相似度對數值的不敏感導致了結果的誤差，需要修正這種不合理性，就出現了調整餘弦相似度，
即所有維度上的數值都減去一個均值，比如X和Y的評分均值都是3，那麼調整後(-2,-1)和(1,2)，再用餘弦相似度計算，得到-0.8，相似度為負值並且差異不小，顯然更加符合現實。

==========================================================================================================================================
TanimotoCoefficientSimilarity:
不計算用戶對物品的評分值(value)是多少，它只關心用戶與物品之間是否存在關聯關係。

公式如下:
等於兩個用戶共同關聯（不管喜歡還是不喜歡）的物品數量除於兩個用戶分別關聯的所有物品數量(交集除以聯集)
其值介於[0, 1]之間，如果兩個用戶關聯的物品完全相同，交集等於聯集，值為1；如果沒有任何關聯，交集為空，值為0。

注意:
適用於無評分的數據(只分喜歡與不喜歡)

==========================================================================================================================================
LogLikelihoodSimilarity:
計算理論與TanimotoCoefficientSimilarity相似，計算方式較複雜
注意:
適用於無評分的數據(只分喜歡與不喜歡)

==========================================================================================================================================
EuclideanDistanceSimilarity:
假設兩者對n個相同事物進行了評分，以事物為坐標以評分為坐標值，那麼u1、u2就是這個坐標軸中的兩個點，
用兩點間的距離可以粗略地評估u1、u2的相似性，距離越長相似性越小。

注意:
(1)沒有考慮用戶間重疊的評分項數量對相似度的影響(使用weight參數解決)
(2)至少有一個共同的評分項目，就能計算相似度

==========================================================================================================================================
CityBlockSimilarity:
與毆式距離相似，歐幾里得空間中兩點在每個坐標系上的投影距離之和

例如:
在Mahout中用計算兩個user/item間的相似性時，以計算user相似性為例，兩者都評分的item距離視為0不計，
只有一個user評分的item距離記為1，也就是在以只有一個user評分的item組成的n維空間中計算Manhattan距離，公式如下:
int prefs1Size = u1評分的item數量;
int prefs2Size = u2評分的item數量;
int intersectionSize = u1、u2都評分的item數量;
int distance = pref1 + pref2 - 2 * intersection;
return 1.0 / (1.0 + distance);
注意:
沒有考慮各個使用者評分差異




